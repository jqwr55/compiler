/*
fn fun0(i64** ptr) -> i64 {
    i64 x;
    ptr[4][1] = x;
    return ptr[4][1];
}
fn fun1(i64** q) -> i64 {

    auto r = q[3][1];
    fun0( q-1 );
    return r + q[3][1];
}

fn fun4() {
    for(;true;;);
    for(;false;;);

    i64 x;
    do {
        ++x;
    }
}
fn fun5(i64* p, u64 n, u64 n2, u64 n3) -> i64 {

    auto r = p[n];
    for(u64 i = 0; i < n; ++i;) {
    }
    for(u64 i = n+n3; i < n2; ++i;) {
    }
    return r + p[n];
}
fn fun6(i64 p0, i64 p1, u64 n) -> i64 {

    i64 add = p0;
    for(u64 i = 0; i < n; ++i;) {
        add = p1;
    }
    return add;
}

fn fun7(i64* ptr, u64 n) -> i64 {

    for( u64 i = 0; i < n; ++i;) {
        return 0;
    }
}

fn fun8(i64* ptr, u64 n) -> i64 {

    if(n == 0) {
        ptr[0] = 52;
    }
    else {
        ptr[0] = 100;
    }
    
    ptr[0] = 5;
}
fn fun9(i64* ptr, i64 n, i64 n2) -> i64 {

    //assume n == n2;
    ptr[n+n] = 0;
    return ptr[n2+n2];
}
fn fun10(i64* p, u64 n) -> i64 {
    
    p[0];
    for(u64 i = 0; i < n; ++i;) {
        p[i] = 0;
    }
    p[0];
}
fn fun11(i64 n) -> i64 {

    for(i64 i = 0; i < 5; ++i;) n;
    return n;
}

fn fun12_fib(i64 n) -> i64 {  

    if(n <= 1) {
        return n;
    }
    return fun12_fib(n-1) + fun12_fib(n-2);
}
struct VectorI64 {
    i64* mem;
    u64 size;
}
fn fun13_vec_i64_size(VectorI64* vector) -> u64 {
    return vector->size;
}
fn fun14_vec_elem(VectorI64* vector, i64 i) -> i64 {
    return (vector->mem)[i];
}
fn fun15(VectorI64* vec) -> i64 {

    i64 sum = 0;
    for(u64 i = 0; i < fun13_vec_i64_size(vec); ++i;) {
        sum = sum + fun14_vec_elem(vec, <i64>i);
    }
    return sum;
}

fn fun16(bool cond) -> i64 {

    i64 r = 10;
    if(cond) {
        r = 0;
    }
    else {

    }
    return r;
}
fn fun17(i64 n) -> i64 {

    for(i64 i = 0; i < n; ++i;) {
        for(i64 k = 0; k < n; ++k;) {
        }
    }
}

fn fun18(i64 n) -> i64 {
    return n;
}
fn fun19(i64 n) -> i64 {
    return n * 2 + 5;
}
fn fun20(bool cond) -> i64 {

    if(cond) {
        return fun18(5);
    }
    else {
        return fun19(10);
    }
}
fn fun21(i64 n) -> i64 {
    if(n == 0) {
        return 2;
    }
    else {
        return n*2;
    }
}
fn fun23(i64 n) -> i64 {    
    return n * 2;
}
fn fun24(i64 n) -> i64 {

    i64 sum = 0;
    for(i64 i = 0; i < n; ++i;) {
        i64 sum2 = fun23(0);
        for(i64 k = 0; k < n; ++k;) {
            sum2 = sum2 + fun23(4);
        }
        sum = sum2;
    }
    return sum;
}

fn fun25(i64 q, i64 w) -> i64 {
    i64 r = ((q + 1) + w) + 2;
    return r + (q + 1);
}

fn fun26(i64 n) -> i64 {


    i64 sum = 0;
    for(i64 i = 0; i < n; ++i;) {
        sum = sum + i;
    }
    return sum;
}

fn fun27(bool cond) -> i64 {

    i64 r;
    if(cond) {
        r = 10;
    }
    else {
        r = 20;
    }
    return r;
}
fn fun28(i64 w) -> i64 {
    i64 x = 3 + 5;
    i64 y = x * w;
    i64 z = y - 0;
    return z * 4;
}
fn fun29(i64 n) -> i64 {

    i64 x = 3 + 5;
    i64 y = x * n;
    i64 z = y - 0;

    for(i64 i = 0; i < n; ++i;) {
        z = z + 1;
    }

    return z * 4;
}
*/
fn fun30(i64 n) -> i64 {

    i64 sum = 0;
    for(i64 i = 0; i < n ; ++i;) {
        for(i64 k = 0; k < n ; ++k;) {
            ++sum;
        }
    }
    return sum;
}